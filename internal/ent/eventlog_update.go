// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/TimeleapLabs/unchained/internal/model"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/TimeleapLabs/unchained/internal/ent/eventlog"
	"github.com/TimeleapLabs/unchained/internal/ent/helpers"
	"github.com/TimeleapLabs/unchained/internal/ent/predicate"
	"github.com/TimeleapLabs/unchained/internal/ent/signer"
)

// EventLogUpdate is the builder for updating EventLog entities.
type EventLogUpdate struct {
	config
	hooks    []Hook
	mutation *EventLogMutation
}

// Where appends a list predicates to the EventLogUpdate builder.
func (elu *EventLogUpdate) Where(ps ...predicate.EventLog) *EventLogUpdate {
	elu.mutation.Where(ps...)
	return elu
}

// SetBlock sets the "block" field.
func (elu *EventLogUpdate) SetBlock(u uint64) *EventLogUpdate {
	elu.mutation.ResetBlock()
	elu.mutation.SetBlock(u)
	return elu
}

// SetNillableBlock sets the "block" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableBlock(u *uint64) *EventLogUpdate {
	if u != nil {
		elu.SetBlock(*u)
	}
	return elu
}

// AddBlock adds u to the "block" field.
func (elu *EventLogUpdate) AddBlock(u int64) *EventLogUpdate {
	elu.mutation.AddBlock(u)
	return elu
}

// SetSignersCount sets the "signersCount" field.
func (elu *EventLogUpdate) SetSignersCount(u uint64) *EventLogUpdate {
	elu.mutation.ResetSignersCount()
	elu.mutation.SetSignersCount(u)
	return elu
}

// SetNillableSignersCount sets the "signersCount" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableSignersCount(u *uint64) *EventLogUpdate {
	if u != nil {
		elu.SetSignersCount(*u)
	}
	return elu
}

// AddSignersCount adds u to the "signersCount" field.
func (elu *EventLogUpdate) AddSignersCount(u int64) *EventLogUpdate {
	elu.mutation.AddSignersCount(u)
	return elu
}

// SetSignature sets the "signature" field.
func (elu *EventLogUpdate) SetSignature(b []byte) *EventLogUpdate {
	elu.mutation.SetSignature(b)
	return elu
}

// SetAddress sets the "address" field.
func (elu *EventLogUpdate) SetAddress(s string) *EventLogUpdate {
	elu.mutation.SetAddress(s)
	return elu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableAddress(s *string) *EventLogUpdate {
	if s != nil {
		elu.SetAddress(*s)
	}
	return elu
}

// SetChain sets the "chain" field.
func (elu *EventLogUpdate) SetChain(s string) *EventLogUpdate {
	elu.mutation.SetChain(s)
	return elu
}

// SetNillableChain sets the "chain" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableChain(s *string) *EventLogUpdate {
	if s != nil {
		elu.SetChain(*s)
	}
	return elu
}

// SetIndex sets the "index" field.
func (elu *EventLogUpdate) SetIndex(u uint64) *EventLogUpdate {
	elu.mutation.ResetIndex()
	elu.mutation.SetIndex(u)
	return elu
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableIndex(u *uint64) *EventLogUpdate {
	if u != nil {
		elu.SetIndex(*u)
	}
	return elu
}

// AddIndex adds u to the "index" field.
func (elu *EventLogUpdate) AddIndex(u int64) *EventLogUpdate {
	elu.mutation.AddIndex(u)
	return elu
}

// SetEvent sets the "event" field.
func (elu *EventLogUpdate) SetEvent(s string) *EventLogUpdate {
	elu.mutation.SetEvent(s)
	return elu
}

// SetNillableEvent sets the "event" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableEvent(s *string) *EventLogUpdate {
	if s != nil {
		elu.SetEvent(*s)
	}
	return elu
}

// SetTransaction sets the "transaction" field.
func (elu *EventLogUpdate) SetTransaction(b []byte) *EventLogUpdate {
	elu.mutation.SetTransaction(b)
	return elu
}

// SetArgs sets the "args" field.
func (elu *EventLogUpdate) SetArgs(dla []model.EventLogArg) *EventLogUpdate {
	elu.mutation.SetArgs(dla)
	return elu
}

// AppendArgs appends dla to the "args" field.
func (elu *EventLogUpdate) AppendArgs(dla []model.EventLogArg) *EventLogUpdate {
	elu.mutation.AppendArgs(dla)
	return elu
}

// SetConsensus sets the "consensus" field.
func (elu *EventLogUpdate) SetConsensus(b bool) *EventLogUpdate {
	elu.mutation.SetConsensus(b)
	return elu
}

// SetNillableConsensus sets the "consensus" field if the given value is not nil.
func (elu *EventLogUpdate) SetNillableConsensus(b *bool) *EventLogUpdate {
	if b != nil {
		elu.SetConsensus(*b)
	}
	return elu
}

// SetVoted sets the "voted" field.
func (elu *EventLogUpdate) SetVoted(hi *helpers.BigInt) *EventLogUpdate {
	elu.mutation.SetVoted(hi)
	return elu
}

// AddSignerIDs adds the "signers" edge to the Signer entity by IDs.
func (elu *EventLogUpdate) AddSignerIDs(ids ...int) *EventLogUpdate {
	elu.mutation.AddSignerIDs(ids...)
	return elu
}

// AddSigners adds the "signers" edges to the Signer entity.
func (elu *EventLogUpdate) AddSigners(s ...*Signer) *EventLogUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return elu.AddSignerIDs(ids...)
}

// Mutation returns the EventLogMutation object of the builder.
func (elu *EventLogUpdate) Mutation() *EventLogMutation {
	return elu.mutation
}

// ClearSigners clears all "signers" edges to the Signer entity.
func (elu *EventLogUpdate) ClearSigners() *EventLogUpdate {
	elu.mutation.ClearSigners()
	return elu
}

// RemoveSignerIDs removes the "signers" edge to Signer entities by IDs.
func (elu *EventLogUpdate) RemoveSignerIDs(ids ...int) *EventLogUpdate {
	elu.mutation.RemoveSignerIDs(ids...)
	return elu
}

// RemoveSigners removes "signers" edges to Signer entities.
func (elu *EventLogUpdate) RemoveSigners(s ...*Signer) *EventLogUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return elu.RemoveSignerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (elu *EventLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, elu.sqlSave, elu.mutation, elu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (elu *EventLogUpdate) SaveX(ctx context.Context) int {
	affected, err := elu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (elu *EventLogUpdate) Exec(ctx context.Context) error {
	_, err := elu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (elu *EventLogUpdate) ExecX(ctx context.Context) {
	if err := elu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (elu *EventLogUpdate) check() error {
	if v, ok := elu.mutation.Signature(); ok {
		if err := eventlog.SignatureValidator(v); err != nil {
			return &ValidationError{Name: "signature", err: fmt.Errorf(`ent: validator failed for field "EventLog.signature": %w`, err)}
		}
	}
	if v, ok := elu.mutation.Transaction(); ok {
		if err := eventlog.TransactionValidator(v); err != nil {
			return &ValidationError{Name: "transaction", err: fmt.Errorf(`ent: validator failed for field "EventLog.transaction": %w`, err)}
		}
	}
	return nil
}

func (elu *EventLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := elu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventlog.Table, eventlog.Columns, sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt))
	if ps := elu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := elu.mutation.Block(); ok {
		_spec.SetField(eventlog.FieldBlock, field.TypeUint64, value)
	}
	if value, ok := elu.mutation.AddedBlock(); ok {
		_spec.AddField(eventlog.FieldBlock, field.TypeUint64, value)
	}
	if value, ok := elu.mutation.SignersCount(); ok {
		_spec.SetField(eventlog.FieldSignersCount, field.TypeUint64, value)
	}
	if value, ok := elu.mutation.AddedSignersCount(); ok {
		_spec.AddField(eventlog.FieldSignersCount, field.TypeUint64, value)
	}
	if value, ok := elu.mutation.Signature(); ok {
		_spec.SetField(eventlog.FieldSignature, field.TypeBytes, value)
	}
	if value, ok := elu.mutation.Address(); ok {
		_spec.SetField(eventlog.FieldAddress, field.TypeString, value)
	}
	if value, ok := elu.mutation.Chain(); ok {
		_spec.SetField(eventlog.FieldChain, field.TypeString, value)
	}
	if value, ok := elu.mutation.Index(); ok {
		_spec.SetField(eventlog.FieldIndex, field.TypeUint64, value)
	}
	if value, ok := elu.mutation.AddedIndex(); ok {
		_spec.AddField(eventlog.FieldIndex, field.TypeUint64, value)
	}
	if value, ok := elu.mutation.Event(); ok {
		_spec.SetField(eventlog.FieldEvent, field.TypeString, value)
	}
	if value, ok := elu.mutation.Transaction(); ok {
		_spec.SetField(eventlog.FieldTransaction, field.TypeBytes, value)
	}
	if value, ok := elu.mutation.Args(); ok {
		_spec.SetField(eventlog.FieldArgs, field.TypeJSON, value)
	}
	if value, ok := elu.mutation.AppendedArgs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, eventlog.FieldArgs, value)
		})
	}
	if value, ok := elu.mutation.Consensus(); ok {
		_spec.SetField(eventlog.FieldConsensus, field.TypeBool, value)
	}
	if value, ok := elu.mutation.Voted(); ok {
		_spec.SetField(eventlog.FieldVoted, field.TypeUint, value)
	}
	if elu.mutation.SignersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   eventlog.SignersTable,
			Columns: eventlog.SignersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := elu.mutation.RemovedSignersIDs(); len(nodes) > 0 && !elu.mutation.SignersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   eventlog.SignersTable,
			Columns: eventlog.SignersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := elu.mutation.SignersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   eventlog.SignersTable,
			Columns: eventlog.SignersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, elu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	elu.mutation.done = true
	return n, nil
}

// EventLogUpdateOne is the builder for updating a single EventLog entity.
type EventLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventLogMutation
}

// SetBlock sets the "block" field.
func (eluo *EventLogUpdateOne) SetBlock(u uint64) *EventLogUpdateOne {
	eluo.mutation.ResetBlock()
	eluo.mutation.SetBlock(u)
	return eluo
}

// SetNillableBlock sets the "block" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableBlock(u *uint64) *EventLogUpdateOne {
	if u != nil {
		eluo.SetBlock(*u)
	}
	return eluo
}

// AddBlock adds u to the "block" field.
func (eluo *EventLogUpdateOne) AddBlock(u int64) *EventLogUpdateOne {
	eluo.mutation.AddBlock(u)
	return eluo
}

// SetSignersCount sets the "signersCount" field.
func (eluo *EventLogUpdateOne) SetSignersCount(u uint64) *EventLogUpdateOne {
	eluo.mutation.ResetSignersCount()
	eluo.mutation.SetSignersCount(u)
	return eluo
}

// SetNillableSignersCount sets the "signersCount" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableSignersCount(u *uint64) *EventLogUpdateOne {
	if u != nil {
		eluo.SetSignersCount(*u)
	}
	return eluo
}

// AddSignersCount adds u to the "signersCount" field.
func (eluo *EventLogUpdateOne) AddSignersCount(u int64) *EventLogUpdateOne {
	eluo.mutation.AddSignersCount(u)
	return eluo
}

// SetSignature sets the "signature" field.
func (eluo *EventLogUpdateOne) SetSignature(b []byte) *EventLogUpdateOne {
	eluo.mutation.SetSignature(b)
	return eluo
}

// SetAddress sets the "address" field.
func (eluo *EventLogUpdateOne) SetAddress(s string) *EventLogUpdateOne {
	eluo.mutation.SetAddress(s)
	return eluo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableAddress(s *string) *EventLogUpdateOne {
	if s != nil {
		eluo.SetAddress(*s)
	}
	return eluo
}

// SetChain sets the "chain" field.
func (eluo *EventLogUpdateOne) SetChain(s string) *EventLogUpdateOne {
	eluo.mutation.SetChain(s)
	return eluo
}

// SetNillableChain sets the "chain" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableChain(s *string) *EventLogUpdateOne {
	if s != nil {
		eluo.SetChain(*s)
	}
	return eluo
}

// SetIndex sets the "index" field.
func (eluo *EventLogUpdateOne) SetIndex(u uint64) *EventLogUpdateOne {
	eluo.mutation.ResetIndex()
	eluo.mutation.SetIndex(u)
	return eluo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableIndex(u *uint64) *EventLogUpdateOne {
	if u != nil {
		eluo.SetIndex(*u)
	}
	return eluo
}

// AddIndex adds u to the "index" field.
func (eluo *EventLogUpdateOne) AddIndex(u int64) *EventLogUpdateOne {
	eluo.mutation.AddIndex(u)
	return eluo
}

// SetEvent sets the "event" field.
func (eluo *EventLogUpdateOne) SetEvent(s string) *EventLogUpdateOne {
	eluo.mutation.SetEvent(s)
	return eluo
}

// SetNillableEvent sets the "event" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableEvent(s *string) *EventLogUpdateOne {
	if s != nil {
		eluo.SetEvent(*s)
	}
	return eluo
}

// SetTransaction sets the "transaction" field.
func (eluo *EventLogUpdateOne) SetTransaction(b []byte) *EventLogUpdateOne {
	eluo.mutation.SetTransaction(b)
	return eluo
}

// SetArgs sets the "args" field.
func (eluo *EventLogUpdateOne) SetArgs(dla []model.EventLogArg) *EventLogUpdateOne {
	eluo.mutation.SetArgs(dla)
	return eluo
}

// AppendArgs appends dla to the "args" field.
func (eluo *EventLogUpdateOne) AppendArgs(dla []model.EventLogArg) *EventLogUpdateOne {
	eluo.mutation.AppendArgs(dla)
	return eluo
}

// SetConsensus sets the "consensus" field.
func (eluo *EventLogUpdateOne) SetConsensus(b bool) *EventLogUpdateOne {
	eluo.mutation.SetConsensus(b)
	return eluo
}

// SetNillableConsensus sets the "consensus" field if the given value is not nil.
func (eluo *EventLogUpdateOne) SetNillableConsensus(b *bool) *EventLogUpdateOne {
	if b != nil {
		eluo.SetConsensus(*b)
	}
	return eluo
}

// SetVoted sets the "voted" field.
func (eluo *EventLogUpdateOne) SetVoted(hi *helpers.BigInt) *EventLogUpdateOne {
	eluo.mutation.SetVoted(hi)
	return eluo
}

// AddSignerIDs adds the "signers" edge to the Signer entity by IDs.
func (eluo *EventLogUpdateOne) AddSignerIDs(ids ...int) *EventLogUpdateOne {
	eluo.mutation.AddSignerIDs(ids...)
	return eluo
}

// AddSigners adds the "signers" edges to the Signer entity.
func (eluo *EventLogUpdateOne) AddSigners(s ...*Signer) *EventLogUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eluo.AddSignerIDs(ids...)
}

// Mutation returns the EventLogMutation object of the builder.
func (eluo *EventLogUpdateOne) Mutation() *EventLogMutation {
	return eluo.mutation
}

// ClearSigners clears all "signers" edges to the Signer entity.
func (eluo *EventLogUpdateOne) ClearSigners() *EventLogUpdateOne {
	eluo.mutation.ClearSigners()
	return eluo
}

// RemoveSignerIDs removes the "signers" edge to Signer entities by IDs.
func (eluo *EventLogUpdateOne) RemoveSignerIDs(ids ...int) *EventLogUpdateOne {
	eluo.mutation.RemoveSignerIDs(ids...)
	return eluo
}

// RemoveSigners removes "signers" edges to Signer entities.
func (eluo *EventLogUpdateOne) RemoveSigners(s ...*Signer) *EventLogUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eluo.RemoveSignerIDs(ids...)
}

// Where appends a list predicates to the EventLogUpdate builder.
func (eluo *EventLogUpdateOne) Where(ps ...predicate.EventLog) *EventLogUpdateOne {
	eluo.mutation.Where(ps...)
	return eluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eluo *EventLogUpdateOne) Select(field string, fields ...string) *EventLogUpdateOne {
	eluo.fields = append([]string{field}, fields...)
	return eluo
}

// Save executes the query and returns the updated EventLog entity.
func (eluo *EventLogUpdateOne) Save(ctx context.Context) (*EventLog, error) {
	return withHooks(ctx, eluo.sqlSave, eluo.mutation, eluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eluo *EventLogUpdateOne) SaveX(ctx context.Context) *EventLog {
	node, err := eluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eluo *EventLogUpdateOne) Exec(ctx context.Context) error {
	_, err := eluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eluo *EventLogUpdateOne) ExecX(ctx context.Context) {
	if err := eluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eluo *EventLogUpdateOne) check() error {
	if v, ok := eluo.mutation.Signature(); ok {
		if err := eventlog.SignatureValidator(v); err != nil {
			return &ValidationError{Name: "signature", err: fmt.Errorf(`ent: validator failed for field "EventLog.signature": %w`, err)}
		}
	}
	if v, ok := eluo.mutation.Transaction(); ok {
		if err := eventlog.TransactionValidator(v); err != nil {
			return &ValidationError{Name: "transaction", err: fmt.Errorf(`ent: validator failed for field "EventLog.transaction": %w`, err)}
		}
	}
	return nil
}

func (eluo *EventLogUpdateOne) sqlSave(ctx context.Context) (_node *EventLog, err error) {
	if err := eluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventlog.Table, eventlog.Columns, sqlgraph.NewFieldSpec(eventlog.FieldID, field.TypeInt))
	id, ok := eluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EventLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventlog.FieldID)
		for _, f := range fields {
			if !eventlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eventlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eluo.mutation.Block(); ok {
		_spec.SetField(eventlog.FieldBlock, field.TypeUint64, value)
	}
	if value, ok := eluo.mutation.AddedBlock(); ok {
		_spec.AddField(eventlog.FieldBlock, field.TypeUint64, value)
	}
	if value, ok := eluo.mutation.SignersCount(); ok {
		_spec.SetField(eventlog.FieldSignersCount, field.TypeUint64, value)
	}
	if value, ok := eluo.mutation.AddedSignersCount(); ok {
		_spec.AddField(eventlog.FieldSignersCount, field.TypeUint64, value)
	}
	if value, ok := eluo.mutation.Signature(); ok {
		_spec.SetField(eventlog.FieldSignature, field.TypeBytes, value)
	}
	if value, ok := eluo.mutation.Address(); ok {
		_spec.SetField(eventlog.FieldAddress, field.TypeString, value)
	}
	if value, ok := eluo.mutation.Chain(); ok {
		_spec.SetField(eventlog.FieldChain, field.TypeString, value)
	}
	if value, ok := eluo.mutation.Index(); ok {
		_spec.SetField(eventlog.FieldIndex, field.TypeUint64, value)
	}
	if value, ok := eluo.mutation.AddedIndex(); ok {
		_spec.AddField(eventlog.FieldIndex, field.TypeUint64, value)
	}
	if value, ok := eluo.mutation.Event(); ok {
		_spec.SetField(eventlog.FieldEvent, field.TypeString, value)
	}
	if value, ok := eluo.mutation.Transaction(); ok {
		_spec.SetField(eventlog.FieldTransaction, field.TypeBytes, value)
	}
	if value, ok := eluo.mutation.Args(); ok {
		_spec.SetField(eventlog.FieldArgs, field.TypeJSON, value)
	}
	if value, ok := eluo.mutation.AppendedArgs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, eventlog.FieldArgs, value)
		})
	}
	if value, ok := eluo.mutation.Consensus(); ok {
		_spec.SetField(eventlog.FieldConsensus, field.TypeBool, value)
	}
	if value, ok := eluo.mutation.Voted(); ok {
		_spec.SetField(eventlog.FieldVoted, field.TypeUint, value)
	}
	if eluo.mutation.SignersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   eventlog.SignersTable,
			Columns: eventlog.SignersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eluo.mutation.RemovedSignersIDs(); len(nodes) > 0 && !eluo.mutation.SignersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   eventlog.SignersTable,
			Columns: eventlog.SignersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eluo.mutation.SignersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   eventlog.SignersTable,
			Columns: eventlog.SignersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EventLog{config: eluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eluo.mutation.done = true
	return _node, nil
}
