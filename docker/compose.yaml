services:
  #timeleap_broker:
  #  image: ghcr.io/timeleaplabs/timeleap:latest
  #  container_name: timeleap_broker
  #  hostname: timeleap_broker
  #  volumes:
  #    - ./conf.broker.yaml:/app/conf.yaml
  #  depends_on:
  #    postgres:
  #      condition: service_healthy
  #  environment:
  #    - TIMELEAP_NODE_TYPE=broker
  #  profiles: ["broker"]
  #  restart: always

  timeleap_standalone:
    image: ghcr.io/timeleaplabs/timeleap:latest
    container_name: timeleap_standalone
    hostname: timeleap_standalone
    volumes:
      - ./conf:/app/conf
      - ./abi:/app/abi
      - ./context:/app/context
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - TIMELEAP_NODE_TYPE=standalone
      - TIMELEAP_CMD=worker
    profiles: ["standalone"]
    restart: always

  postgres:
    image: postgres:16.1
    container_name: postgres
    hostname: postgres
    env_file:
      - .env
    volumes:
      - ./data:/var/lib/postgresql/data
    profiles: ["standalone"]
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  #grafana:
  #  image: grafana/grafana-oss:latest
  #  container_name: grafana
  #  restart: always
  #  ports:
  #    - "127.0.0.1:3000:3000"
  #  env_file:
  #    - .env
  #  volumes:
  #    - ./grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
  #    - ./grafana/datasource.yaml:/etc/grafana/provisioning/datasources/main.yaml
  #    - ./grafana/dashboards:/var/lib/grafana/dashboards
  #  profiles: ["broker"]
  #  depends_on:
  #    postgres:
  #      condition: service_healthy

  timeleap_worker:
    image: ghcr.io/timeleaplabs/timeleap:latest
    container_name: timeleap_worker
    hostname: timeleap_worker
    volumes:
      - ./conf:/app/conf
      - ./context:/app/context
    environment:
      - TIMELEAP_NODE_TYPE=worker
      - TIMELEAP_CMD=worker
    profiles: ["worker"]
    restart: always

  #timeleap_remote:
  #  image: ghcr.io/timeleaplabs/timeleap:latest
  #  container_name: timeleap_remote
  #  hostname: timeleap_remote
  #  volumes:
  #    - ./conf.remote.yaml:/app/conf.yaml
  #  environment:
  #    - TIMELEAP_NODE_TYPE=broker
  #  profiles: ["remote"]
  #  restart: always
